generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  role          Role
  name          String
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  coursesTaught Course[] @relation("CourseInstructor")
  slots         Slot[]   @relation("SlotInstructor")
}

model Student {
  id            String       @id @default(cuid())
  name          String
  fatherName    String
  phone         String
  age           Int
  school        String?
  address       String?
  admissionDate DateTime     @default(now())
  enrollments   Enrollment[]
  payments      Payment[]
}

model Course {
  id             String     @id @default(cuid())
  title          String
  type           CourseType
  durationMonths Int
  feeMonthly     Float
  feePackage     Float
  slots          Slot[]
  instructorId   String?
  instructor     User?      @relation("CourseInstructor", fields: [instructorId], references: [id])
}

model Slot {
  id           String       @id @default(cuid())
  courseId     String
  labId        String
  instructorId String
  startTime    DateTime
  endTime      DateTime
  capacity     Int
  enrollments  Enrollment[]
  course       Course       @relation(fields: [courseId], references: [id])
  instructor   User         @relation("SlotInstructor", fields: [instructorId], references: [id])
  lab          Lab          @relation(fields: [labId], references: [id])
}

model Enrollment {
  id         String       @id @default(cuid())
  studentId  String
  slotId     String
  startDate  DateTime
  endDate    DateTime
  attendance Attendance[]
  student    Student      @relation(fields: [studentId], references: [id])
  slot       Slot         @relation(fields: [slotId], references: [id])
}

model Attendance {
  id           String           @id @default(cuid())
  enrollmentId String
  date         DateTime
  status       AttendanceStatus
  enrollment   Enrollment       @relation(fields: [enrollmentId], references: [id])
}

model Lab {
  id       String @id @default(cuid())
  name     String
  capacity Int
  slots    Slot[]
}

model Payment {
  id        String        @id @default(cuid())
  studentId String
  amount    Float
  date      DateTime      @default(now())
  method    PaymentMethod
  type      PaymentType
  student   Student       @relation(fields: [studentId], references: [id])
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  category    String
}

enum Role {
  ADMIN
  TEACHER
}

enum CourseType {
  COMPUTER
  ENGLISH
  COACHING
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum PaymentMethod {
  CASH
  BANK
}

enum PaymentType {
  MONTHLY
  PACKAGE
}
